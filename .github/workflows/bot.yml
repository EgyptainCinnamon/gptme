name: gptme-bot

on:
  issue_comment:
    types: [created]

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  check-comment:
    runs-on: ubuntu-latest

    outputs:
      gptme_command: ${{ steps.detect_command.outputs.gptme_command }}

    steps:
      - name: Detect gptme command
        id: detect_command
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"

          # Check if the comment starts with "@gptme"
          if [[ $COMMENT_BODY == "@gptme "* ]]; then
            # Extract the command
            GPTME_COMMAND=${COMMENT_BODY#"@gptme "}
            echo "gptme_command=${GPTME_COMMAND}" >> $GITHUB_OUTPUT
          fi

      - name: Fail if author not on whitelist
        if: steps.detect_command.outputs.gptme_command
        run: |
          WHITELIST=("ErikBjare")  # Add your allowed usernames here
          COMMENT_AUTHOR="${{ github.event.comment.user.login }}"

          if [[ ! " ${WHITELIST[@]} " =~ " ${COMMENT_AUTHOR} " ]]; then
            echo "Error: Author ${COMMENT_AUTHOR} is not on the whitelist."
            exit 1
          else
            echo "Author ${COMMENT_AUTHOR} is on the whitelist."
          fi

  execute-command:
    needs: check-comment
    if: needs.check-comment.outputs.gptme_command
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install ctags
        run: sudo apt install universal-ctags

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'

      - name: Install dependencies
        run: |
          make build
          poetry install -E datascience

      - name: Run gptme
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          GPTME_COMMAND="${{ needs.check-comment.outputs.gptme_command }}"
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          REPO_NAME="${{ github.event.repository.name }}"
          USER_NAME="${{ github.event.repository.owner.login }}"

          # Run gptme with the extracted command
          poetry run gptme --non-interactive "$GPTME_COMMAND"

      - name: Commit, push, comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_TYPE="${{ github.event.issue.pull_request && 'pull_request' || 'issue' }}"
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          REPO_NAME="${{ github.event.repository.name }}"
          USER_NAME="${{ github.event.repository.owner.login }}"
          BRANCH_NAME="gptme-bot-changes-$(date +'%Y%m%d%H%M%S')"

          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          COMMENT_URL="https://github.com/${{ github.repository }}/issues/${{ github.event.issue.number }}#issuecomment-${{ github.event.comment.id }}"
          JOB_DESC="The changes where made in this run: $RUN_URL\nThe run was triggered by this comment: $COMMENT_URL"

          git config user.name "gptme-bot"
          git config user.email "gptme-bot@superuserlabs.org"

          if [[ $ISSUE_TYPE == "pull_request" ]]; then
            # Push changes to the PR branch
            git add -A
            git commit -m "Changes by gptme-bot\n\n$JOB_DESC"
            git push

            # Comment on the PR
            echo "Changes have been pushed to this pull request." | gh pr comment $ISSUE_NUMBER -R $USER_NAME/$REPO_NAME --body-file=-
          else
            # Create a new branch and push changes
            git checkout -b $BRANCH_NAME
            git add -A
            git commit -m "Changes by gptme-bot for issue #$ISSUE_NUMBER\n\n$JOB_DESC"
            git push -u origin $BRANCH_NAME

            # Create a PR
            PR_URL=$(gh pr create --title "Changes for issue #$ISSUE_NUMBER" --body "Automated changes by gptme-bot." --head $BRANCH_NAME --repo $USER_NAME/$REPO_NAME --base main | grep -o 'https://github.com[^ ]*')

            # Comment on the issue with the PR link
            echo "A pull request has been created for this issue: $PR_URL" | gh issue comment $ISSUE_NUMBER -R $USER_NAME/$REPO_NAME --body-file=-
          fi

